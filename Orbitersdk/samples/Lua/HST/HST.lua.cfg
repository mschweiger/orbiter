--[[
; Example for a script-driven vessel class definition.
; For implementation code, see Orbitersdk/samples/ScriptVessel
; This file contains both the configuration and script parts.
; The config part is terminated by 'END_PARSE' to prevent the
; Orbiter parser from reading the script, and enclosed in Lua
; comment brackets to make it a comment for the script interpreter.

; A. Configuration section
; -------------------------------------------
ClassName = HST.lua
Module = ScriptVessel
Script = HST.lua.cfg
ImageBmp = Images/Vessels/Default/HST.bmp
END_PARSE




; B. Script section
; -------------------------------------------
--]]

-- Vessel parameters
HST_SIZE = 7.52
HST_EMPTY_MASS = 10886
ANTENNA_OPERATING_SPEED = 0.025
HATCH_OPERATING_SPEED = 0.022
ARRAY_OPERATING_SPEED = 0.02
PI=3.14159265359

DOOR_CLOSED=0
DOOR_OPEN=1
DOOR_CLOSING=2
DOOR_OPENING=3

ant_proc = 0.0
ant_status = DOOR_CLOSED
hatch_proc = 0.0
hatch_status = DOOR_CLOSED
array_proc = 1.0
array_status = DOOR_OPEN


-- SetClassCaps implementation

function clbk_setclasscaps(cfg)
  -- 1. Hi-gain antenna
  local trans_HiGainAnt1 = {                          -- transformation for left aileron animation
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {1,3},                                -- group indices
    ref = {x=-0.002579,y=1.993670,z=0.238158},  -- reference point
    axis = {x=-1,y=0,z=0},                      -- rotation axis
    angle = PI*0.51                             -- rotation angle
  }
  local trans_HiGainAnt2 = {                          -- transformation for left aileron animation
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {0,2},                                -- group indices
    ref = {x=0.002740,y=-2.013091,z=0.238118},  -- reference point
    axis = {x=1,y=0,z=0},                       -- rotation axis
    angle = PI*0.51                             -- rotation angle
  }

  local comp_HiGainAnt1 = oapi.create_animationcomponent(trans_HiGainAnt1)
  local comp_HiGainAnt2 = oapi.create_animationcomponent(trans_HiGainAnt2)
  anim_ant = vi:create_animation(0.0196);

  vi:add_animationcomponent(anim_ant, 0.0, 0.5, comp_HiGainAnt1)
  vi:add_animationcomponent(anim_ant, 0.0, 1.0, comp_HiGainAnt2)


  -- 2. Main telescope hatch

  local trans_Hatch = {                               -- transformation for left aileron animation
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = 86,                                   -- group indices
    ref = {x=0.089688,y=1.456229,z=7.526453},   -- reference point
    axis = {x=-1,y=0,z=0},                      -- rotation axis
    angle = PI/180.0*113                        -- rotation angle
  }
  local comp_Hatch = oapi.create_animationcomponent(trans_Hatch)
  anim_hatch = vi:create_animation(0);
  vi:add_animationcomponent(anim_hatch, 0.0, 1.0, comp_Hatch)
  
  -- 3. Solar arrays - folding
  anim_array = vi:create_animation(1)
  local comp_ArrayLFold1 = oapi.create_animationcomponent({
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {87,88,89,90,103},                    -- group indices
    ref = {x=-1.9,y=0.053583,z=1.429349},       -- reference point
    axis = {x=0,y=-1,z=0},                      -- rotation axis
    angle = PI*0.5                              -- rotation angle
  })
  vi:add_animationcomponent(anim_array, 0.0, 0.4, comp_ArrayLFold1)

  local comp_ArrayLFold2 = oapi.create_animationcomponent({
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {87,88,89,90,103},                    -- group indices
    ref = {x=0,y=0.053583,z=1.429349},          -- reference point
    axis = {x=-1,y=0,z=0},                      -- rotation axis
    angle = PI*0.5                              -- rotation angle
  })
  vi:add_animationcomponent(anim_array, 0.4, 0.6, comp_ArrayLFold2)

  local comp_ArrayLFold3 = oapi.create_animationcomponent({
    type = 'scaling',                           -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {87,88,89,90},                        -- group indices
    ref = {x=0,y=0.053583,z=1.429349},          -- reference point
    scale = {x=1,y=1,z=4}                       -- scale factor
  })
  vi:add_animationcomponent(anim_array, 0.6, 1.0, comp_ArrayLFold3)


  local comp_ArrayRFold1 = oapi.create_animationcomponent({
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {92,93,94,95,102},                    -- group indices
    ref = {x=1.9,y=0.053583,z=1.429349},        -- reference point
    axis = {x=0,y=1,z=0},                       -- rotation axis
    angle = PI*0.5                              -- rotation angle
  })
  vi:add_animationcomponent(anim_array, 0.0, 0.4, comp_ArrayRFold1)

  local comp_ArrayRFold2 = oapi.create_animationcomponent({
    type = 'rotation',                          -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {92,93,94,95,102},                    -- group indices
    ref = {x=0,y=0.053583,z=1.429349},          -- reference point
    axis = {x=-1,y=0,z=0},                      -- rotation axis
    angle = PI*0.5                              -- rotation angle
  })
  vi:add_animationcomponent(anim_array, 0.4, 0.6, comp_ArrayRFold2)

  local comp_ArrayRFold3 = oapi.create_animationcomponent({
    type = 'scaling',                           -- transformation type
    mesh = 0,                                   -- mesh index
    grp = {92,93,94,95},                        -- group indices
    ref = {x=0,y=0.053583,z=1.429349},          -- reference point
    scale = {x=1,y=1,z=4}                       -- scale factor
  })
  vi:add_animationcomponent(anim_array, 0.6, 1.0, comp_ArrayRFold3)

  -- physical vessel parameters
  vi:set_size(HST_SIZE)
  vi:set_emptymass(HST_EMPTY_MASS)
  
  -- associate a mesh for the visual
  vi:add_mesh('HST_STS-109')
end

function clbk_savestate(scn)
  oapi.writescenario_string(scn, "ANT",   ant_status   .. " " .. ant_proc)
  oapi.writescenario_string(scn, "HATCH", hatch_status .. " " .. hatch_proc)
  oapi.writescenario_string(scn, "FOLD",  array_status .. " " .. array_proc)
end

-- helper function to create an iterator usable in a for loop
local function iterate_lines(scn)
    return function()
              return oapi.readscenario_nextline(scn)
           end
end

function clbk_loadstateex(scn, vs)
  for line in iterate_lines(scn) do
       local kw, status, proc = line:match("(%S+) (%d) (%S+)")
       if     kw == "ANT"   then ant_status,   ant_proc   = tonumber(status), tonumber(proc)
       elseif kw == "HATCH" then hatch_status, hatch_proc = tonumber(status), tonumber(proc)
       elseif kw == "FOLD"  then array_status, array_proc = tonumber(status), tonumber(proc)
       else
           vi:parse_scenario_line_ex(line, vs)
       end
  end
  
  vi:set_animation(anim_ant,   ant_proc)
  vi:set_animation(anim_hatch, hatch_proc)
  vi:set_animation(anim_array, array_proc)
end


local function revert_status(status)
    if status == DOOR_CLOSED or status == DOOR_CLOSING then
        return DOOR_OPENING
    else
        return DOOR_CLOSING
    end
end

function antenna(activate)
    oapi.dbg_out("antenna "..tostring(activate))
    ant_status = activate and DOOR_OPENING or DOOR_CLOSING
end

function hatch(activate)
    oapi.dbg_out("hatch "..tostring(activate))
    hatch_status = activate and DOOR_OPENING or DOOR_CLOSING
end

function array(activate)
    oapi.dbg_out("array "..tostring(activate))
    array_status = activate and DOOR_OPENING or DOOR_CLOSING
end

function clbk_consumebufferedkey(key, down, kstate)
    if not down then -- only process keydown events
        return false
    end

    if oapi.keydown(kstate, OAPI_KEY.LCONTROL) or oapi.keydown(kstate, OAPI_KEY.RCONTROL) then
        if key == OAPI_KEY.KEY1 then     -- deploy/retract antenna
            ant_status = revert_status(ant_status)
            return true
        elseif key == OAPI_KEY.KEY2 then -- open/close hatch
            hatch_status = revert_status(hatch_status)
            return true
        elseif key == OAPI_KEY.KEY3 then -- open/fold solar arrays
            array_status = revert_status(array_status)
            return true
        end
    end
	return false
end

--------------------------------------------------------------
-- Frame update
--------------------------------------------------------------
function clbk_poststep(simt, simdt, mjd)
	-- Animate hi-gain antenna
	if ant_status >= DOOR_CLOSING then
		local da = simdt * ANTENNA_OPERATING_SPEED
		if ant_status == DOOR_CLOSING then
			if ant_proc > 0.0 then
                ant_proc = math.max(0.0, ant_proc - da)
			else
                ant_status = DOOR_CLOSED
            end
		else
			if ant_proc < 1.0 then
                ant_proc = math.min(1.0, ant_proc + da)
			else
                ant_status = DOOR_OPEN
            end
		end
		vi:set_animation(anim_ant, ant_proc);
	end

	-- Animate main telescope hatch
	if hatch_status >= DOOR_CLOSING then
		local da = simdt * HATCH_OPERATING_SPEED
		if hatch_status == DOOR_CLOSING then
			if hatch_proc > 0.0 then
                hatch_proc = math.max(0.0, hatch_proc - da)
			else
                hatch_status = DOOR_CLOSED
            end
		else
			if hatch_proc < 1.0 then
                hatch_proc = math.min(1.0, hatch_proc + da)
			else
                hatch_status = DOOR_OPEN
            end
		end
		vi:set_animation(anim_hatch, hatch_proc);
	end

	-- Animate solar arrays
	if array_status >= DOOR_CLOSING then
		local da = simdt * ARRAY_OPERATING_SPEED
		if array_status == DOOR_CLOSING then
			if array_proc > 0.0 then
                array_proc = math.max(0.0, array_proc - da)
			else
                array_status = DOOR_CLOSED
            end
		else
			if array_proc < 1.0 then
                array_proc = math.min(1.0, array_proc + da)
			else
                array_status = DOOR_OPEN
            end
		end
		vi:set_animation (anim_array, array_proc)
	end
end

function clbk_consumedirectkey(kstate)
--    if oapi.keydown(kstate, OAPI_KEY.H) then
--            oapi.dbg_out("test clbk_consumedirectkey")
--    else
--            oapi.dbg_out("")
--    end
	return false
end

function clbk_focuschanged(getfocus, hNewVessel, hOldVessel)
    local newName = oapi.get_objname(hNewVessel)
    local oldName = hOldVessel ~= nil and oapi.get_objname(hOldVessel) or "nil"
    if getfocus then
        oapi.dbg_out("clbk_focuschanged new:"..newName.." old:"..oldName)
    end
end

function clbk_RCSmode(mode)
    if mode == RCSMODE.OFF then
        oapi.dbg_out("RCS OFF")
    elseif mode == RCSMODE.ROT then
        oapi.dbg_out("RCS ROT")
    elseif mode == RCSMODE.LIN then
        oapi.dbg_out("RCS LIN")
    else
        oapi.dbg_out("RCS unknown:"..tostring(mode))
    end
end

function clbk_ADctrlmode(mode)
    if mode == ADCMODE.OFF then
        oapi.dbg_out("ADC OFF")
    elseif mode == ADCMODE.ELEVATOR then
        oapi.dbg_out("ADC ELEVATOR")
    elseif mode == ADCMODE.RUDDER then
        oapi.dbg_out("ADC RUDDER")
    elseif mode == ADCMODE.AILERON then
        oapi.dbg_out("ADC AILERON")
    elseif mode == ADCMODE.ON then
        oapi.dbg_out("ADC ON")
    else
        oapi.dbg_out("ADC unknown:"..tostring(mode))
    end
end

function clbk_HUDmode(mode)
    if mode == HUDMODE.NONE then
        oapi.dbg_out("HUD NONE")
    elseif mode == HUDMODE.ORBIT then
        oapi.dbg_out("HUD ORBIT")
    elseif mode == HUDMODE.SURFACE then
        oapi.dbg_out("HUD SURFACE")
    elseif mode == HUDMODE.DOCKING then
        oapi.dbg_out("HUD DOCKING")
    else
        oapi.dbg_out("HUD mode unknown:"..tostring(mode))
    end
end

function clbk_MFDmode(mfdid, mode)
    if mode == MFDMODE.REFRESHBUTTONS then
        oapi.dbg_out("MFD REFRESHBUTTONS "..mfdid)
    elseif mode == MFDMODE.NONE then
        oapi.dbg_out("MFD NONE "..mfdid)
    elseif mode == MFDMODE.ORBIT then
        oapi.dbg_out("MFD ORBIT "..mfdid)
    elseif mode == MFDMODE.SURFACE then
        oapi.dbg_out("MFD SURFACE "..mfdid)
    elseif mode == MFDMODE.MAP then
        oapi.dbg_out("MFD MAP "..mfdid)
    elseif mode == MFDMODE.HSI then
        oapi.dbg_out("MFD HSI "..mfdid)
    elseif mode == MFDMODE.LANDING then
        oapi.dbg_out("MFD LANDING "..mfdid)
    elseif mode == MFDMODE.DOCKING then
        oapi.dbg_out("MFD DOCKING "..mfdid)
    elseif mode == MFDMODE.OPLANEALIGN then
        oapi.dbg_out("MFD OPLANEALIGN "..mfdid)
    elseif mode == MFDMODE.OSYNC then
        oapi.dbg_out("MFD OSYNC "..mfdid)
    elseif mode == MFDMODE.TRANSFER then
        oapi.dbg_out("MFD TRANSFER "..mfdid)
    elseif mode == MFDMODE.COMMS then
        oapi.dbg_out("MFD COMMS "..mfdid)
    elseif mode == MFDMODE.USERTYPE then
        oapi.dbg_out("MFD USERTYPE "..mfdid)
    else
        oapi.dbg_out("MFD mode unknown:"..tostring(mode))
    end
end

function clbk_NAVmode(mode, active)
    local status = active and "ON" or "OFF"
    if mode == NAVMODE.KILLROT then
        oapi.dbg_out("NAV KILLROT "..status)
    elseif mode == NAVMODE.HLEVEL then
        oapi.dbg_out("NAV HLEVEL "..status)
    elseif mode == NAVMODE.PROGRADE then
        oapi.dbg_out("NAV PROGRADE "..status)
    elseif mode == NAVMODE.RETROGRADE then
        oapi.dbg_out("NAV RETROGRADE "..status)
    elseif mode == NAVMODE.NORMAL then
        oapi.dbg_out("NAV NORMAL "..status)
    elseif mode == NAVMODE.ANTINORMAL then
        oapi.dbg_out("NAV ANTINORMAL "..status)
    elseif mode == NAVMODE.HOLDALT then
        oapi.dbg_out("NAV HOLDALT "..status)
    else
        oapi.dbg_out("NAV mode unknown:"..tostring(mode))
    end
end
